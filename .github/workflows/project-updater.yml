name: Project Logger

on:
  repository_dispatch:
    types: [task_started, task_link_issue, pr_opened, task_done, task_failed]

permissions:
  contents: read
  projects: write

env:
  PROJECT_OWNER: ${{ vars.PROJECT_OWNER }}
  PROJECT_NUMBER: ${{ vars.PROJECT_NUMBER }}
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  update-project:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: Show gh version
        run: gh --version
      - name: Handle event
        id: handle
        shell: bash
        run: |
          set -euo pipefail
          echo "Event: ${{ github.event.action }}"
          resolve_by_run_id() {
            local rid="$1"
            if [[ -z "$rid" ]]; then echo ""; return; fi
            gh project item-list "$PROJECT_NUMBER" --owner "$PROJECT_OWNER" --format json \
              | jq -r --arg RID "$rid" '.items[] | select((."run ID"//"")==$RID) | .id' | head -n1
          }
          case "${{ github.event.action }}" in
            task_started)
              title=${{ toJson(github.event.client_payload.title) }}
              body=${{ toJson(github.event.client_payload.body) }}
              run_id=${{ toJson(github.event.client_payload.run_id) }}
              branch=${{ toJson(github.event.client_payload.branch) }}
              repo=${{ toJson(github.event.client_payload.repo) }}
              item_id=$(scripts/project-logger.sh start \
                --title "${title:1:-1}" \
                --body "${body:1:-1}" \
                --run-id "${run_id:1:-1}" \
                --branch "${branch:1:-1}" \
                --repo "${repo:1:-1}")
              echo "item_id=$item_id" >> "$GITHUB_OUTPUT"
              ;;
            task_link_issue)
              iid="${{ github.event.client_payload.item_id }}"
              [[ -z "$iid" ]] && iid="$(resolve_by_run_id "${{ github.event.client_payload.run_id }}")"
              scripts/project-logger.sh link \
                --item-id "$iid" \
                --issue-url "${{ github.event.client_payload.issue_url }}"
              ;;
            pr_opened)
              iid="${{ github.event.client_payload.item_id }}"
              [[ -z "$iid" ]] && iid="$(resolve_by_run_id "${{ github.event.client_payload.run_id }}")"
              scripts/project-logger.sh pr \
                --item-id "$iid" \
                --pr-url "${{ github.event.client_payload.pr_url }}"
              ;;
            task_done)
              iid="${{ github.event.client_payload.item_id }}"
              [[ -z "$iid" ]] && iid="$(resolve_by_run_id "${{ github.event.client_payload.run_id }}")"
              scripts/project-logger.sh finish \
                --item-id "$iid" \
                --status Done \
                --tokens-total "${{ github.event.client_payload.tokens_total }}" \
                --start-ts "${{ github.event.client_payload.start_ts }}" \
                --end-ts "${{ github.event.client_payload.end_ts }}" \
                --run-id "${{ github.event.client_payload.run_id }}"
              ;;
            task_failed)
              iid="${{ github.event.client_payload.item_id }}"
              [[ -z "$iid" ]] && iid="$(resolve_by_run_id "${{ github.event.client_payload.run_id }}")"
              scripts/project-logger.sh finish \
                --item-id "$iid" \
                --status Failed \
                --tokens-total "${{ github.event.client_payload.tokens_total }}" \
                --start-ts "${{ github.event.client_payload.start_ts }}" \
                --end-ts "${{ github.event.client_payload.end_ts }}" \
                --run-id "${{ github.event.client_payload.run_id }}"
              ;;
            *) echo "Unhandled action"; exit 1 ;;
          esac
